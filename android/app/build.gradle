// ref: https://zenn.dev/riscait/articles/separating-environments-in-flutter
def dartEnvironmentVariables = [:];
if (project.hasProperty('dart-defines')) {
    // カンマ区切りかつBase64でエンコードされている dart-defines をデコードして変数に格納します。
    dartEnvironmentVariables = dartEnvironmentVariables + project.property('dart-defines')
        .split(',')
        .collectEntries { entry ->
            def pair = new String(entry.decodeBase64(), 'UTF-8').split('=')
            [(pair.first()): pair.last()]
        }
}

def localProperties = new Properties()
def localPropertiesFile = rootProject.file('local.properties')
if (localPropertiesFile.exists()) {
    localPropertiesFile.withReader('UTF-8') { reader ->
        localProperties.load(reader)
    }
}

def flutterRoot = localProperties.getProperty('flutter.sdk')
if (flutterRoot == null) {
    throw new GradleException("Flutter SDK not found. Define location with flutter.sdk in the local.properties file.")
}

def flutterVersionCode = localProperties.getProperty('flutter.versionCode')
if (flutterVersionCode == null) {
    flutterVersionCode = '1'
}

def flutterVersionName = localProperties.getProperty('flutter.versionName')
if (flutterVersionName == null) {
    flutterVersionName = '1.0'
}

apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply plugin: 'com.google.gms.google-services'
apply from: "$flutterRoot/packages/flutter_tools/gradle/flutter.gradle"

android {
    // ref: https://stackoverflow.com/questions/66603488/ndk-is-not-installed
    ndkVersion rootProject.ext.ndkVersion

    compileSdkVersion 31

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    kotlinOptions {
        jvmTarget = '1.8'
    }

    sourceSets {
        main.java.srcDirs += 'src/main/kotlin'
    }

    defaultConfig {
        applicationId "com.nevermind.nsneaker"
        minSdkVersion 24
        targetSdkVersion flutter.targetSdkVersion
        versionCode flutterVersionCode.toInteger()
        versionName flutterVersionName
        if (dartEnvironmentVariables.FLAVOR != 'prod') {
            applicationIdSuffix ".${dartEnvironmentVariables.FLAVOR}"
        }
        // ref: https://zenn.dev/riscait/articles/separating-environments-in-flutter
        resValue "string", "app_name", "N-Sneaker" + 
            (dartEnvironmentVariables.FLAVOR == 'prod' ? '' : ".${dartEnvironmentVariables.FLAVOR}")
        resValue "string", "adapty_public_sdk_key", (dartEnvironmentVariables.FLAVOR == 'prod' ? 'public_live_96qQsRVA.r8MpDD0AiDF0JylUfUAc' : "public_live_NxLytlOA.MHMxqQXIQSAuISm7dgxf")
    }

    apply from: './signingConfigs.gradle', to: android
    buildTypes {
        release {
            signingConfig signingConfigs.release
        }
    }

    // ref: https://qiita.com/stmon19/items/4e710cc83c099b98d4f5#lint-options%E3%82%92%E8%BF%BD%E8%A8%98
    lintOptions {
        disable 'InvalidPackage'
        checkReleaseBuilds false
    }
}

flutter {
    source '../..'
}


dependencies {
    implementation project(':unityLibrary')

    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk7:$kotlin_version"
}

// ref: https://zenn.dev/riscait/articles/separating-environments-in-flutter
task copySources(type: Copy) {
   from "src/${dartEnvironmentVariables.FLAVOR}/res"
   into 'src/main/res'
}

task selectGoogleServicesJson(type: Copy) {
    from "src/${dartEnvironmentVariables.FLAVOR}/google-services.json"
    into './'
}

tasks.whenTaskAdded { task ->
    task.dependsOn copySources
    task.dependsOn selectGoogleServicesJson
}
